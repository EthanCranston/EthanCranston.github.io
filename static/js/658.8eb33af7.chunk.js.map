{"version":3,"file":"static/js/658.8eb33af7.chunk.js","mappings":"2OA8BA,EAvBMA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GACF,WAAYC,GAAQ,IAAD,yBACf,cAAMA,IACDC,KAAOD,EAAMC,KAClB,EAAKC,SAAWF,EAAME,SAHP,EAmBlB,OAfA,yCAED,WACIC,IAAAA,iBACH,oBACD,WACI,OACI,0BACI,gBAAMC,MAAO,yCAAb,UACI,iBAAMC,UAAS,mBAAcC,KAAKJ,UAAlC,SACKI,KAAKL,eAKzB,EApBCF,CAAoBQ,EAAAA,Y,6FCoC1B,UArCuB,WACnB,OACI,iCACA,qDACA,+RAIA,sPAGA,cAAGH,MAAM,cAAT,UAAuB,kTAKvB,6OAGA,SAAC,IAAD,CAAeI,IAAKC,OAAOC,IAAT,uFAClB,2FAGA,SAAC,IAAD,CAAeF,IAAKC,OAAOC,IAAT,6FAGlB,mBAEA,sOAEI,SAAC,IAAD,CAAaR,SAAS,IAAGD,KAAMU,KACnC,mBACA,yDAA+B,cAAGC,KAAK,iDAAR,mEAOvC,IAAID,EAAe,kL","sources":["components/CodeSnippet/CodeSnippet.js","pages/projects/equationFinder.js"],"sourcesContent":["import React from \"react\";\nimport Prism from \"prismjs\";\nimport \"./prismDark.css\";\nimport \"prismjs/components/prism-python\"\nimport \"prismjs/components/prism-c\"\n\n\nclass CodeSnippet extends React.Component {\n    constructor(props) {\n        super(props);\n        this.code = props.code;\n        this.language = props.language;\n    }\n\n    componentDidMount() {\n        Prism.highlightAll();\n    }\n    render() {\n        return (\n            <div>\n                <pre  class={'rounded-md border-amber-500 border-b-2'}>\n                    <code className={`language-${this.language}`}>\n                        {this.code}\n                    </code>\n                </pre>\n            </div>\n        );\n    }\n};\n\nexport default CodeSnippet;","import React from 'react'\nimport CodeSnippet from \"../../components/CodeSnippet/CodeSnippet\";\nimport { MathComponent } from 'mathjax-react'\nimport \"../Pages.css\";\n\n\nconst EquationFinder = () => {\n    return (\n        <>\n        <h1>Reverse Equation Finder</h1>\n        <p>I occasionally found myself in the situation where I had a problem and the solution, but \n            could not remember how I had originally solved it. To overcome this, I wrote a program in C++ that \n            exhaustively checks possible equations until the correct one is found.\n        </p>\n        <p>The program takes in the units and value of the givens and solution to a problem, then recursively \n            structures equations until a valid answer is found. As an example, take this simple inelastic collision \n            story problem:</p>\n        <p class=\"ml-16 mr-16\"><i>Joe has a mass of 17kg and is sliding down a snowy hill with a velocity of 5m/s. \n            His brother has a mass of 23kg and is sliding down the same hill with a velocity of 3m/s. \n            The two boys collide and slide down the hill together. \n            Calculate the resulting velocity of the two boys.</i></p>\n\n        <p>If we know the solution is 3.85m/s, we can plug in the values and units to get the original equation. \n            In this case, the program computed 166,093 possible equations in ~1 second until it verified the equation:\n        </p>\n        <MathComponent tex={String.raw`3.85=\\frac{23*3+17*5}{17+23}`} />\n        <p>\n            Which you may recognize from this Physics I momentum equation:\n        </p>\n        <MathComponent tex={String.raw`V=\\frac{M_1V_1+M_2V_2}{M_1+M_2}`} />\n        \n        \n        <br></br>\n\n        <p>To make the creation of new equations simple, the equations are represented as binary trees. \n            This makes combining and evaluating equation efficient. Below is a simplified outline of the equation class.</p>\n            <CodeSnippet language=\"c\"code={equationCode}/>\n        <br></br>\n        <p>View the full project here: <a href=\"https://github.com/ecranston405/EquationFinder\">https://github.com/ecranston405/EquationFinder</a></p>\n        </>\n    );\n};\n\nexport default EquationFinder\n\nlet equationCode = 'class Equation {\\nMathOperator _operation;\\nEquation* _eq1; // right side of operator\\nEquation* _eq2; // left side of operator\\ndouble _value;\\nint _order;\\ndouble _unit;\\n}'"],"names":["CodeSnippet","props","code","language","Prism","class","className","this","React","tex","String","raw","equationCode","href"],"sourceRoot":""}