{"version":3,"file":"static/js/122.029be070.chunk.js","mappings":"2HAkBA,IAhBuB,SAAC,GAA6B,IAA3BA,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,QAASC,EAAU,EAAVA,IAKxC,YAJYC,IAARD,IACFA,EAAMD,IAIF,iBAAKG,UAAW,oBAAhB,WACI,gBAAKC,IAAKL,EAAOI,UAAS,qFACZD,IAAZF,EAAwB,mBAAqB,IAAMC,IAAKA,KAC1D,gBAAKE,UAAU,oBAAf,UACI,cAAGA,UAAW,8CAAd,SAA8DH,W,uSC4B9E,EAjCoB,WAClB,OACM,iCACA,iDACA,uPAGA,mBACA,4RAIA,iBAAKG,UAAW,sCAAhB,WACI,SAACE,EAAA,EAAD,CAAgBN,MAAOO,EAAcN,QAAS,sBAAuBO,UAAW,MAChF,SAACF,EAAA,EAAD,CAAgBN,MAAOS,EAASR,QAAS,uBAAwBO,UAAW,SAGhF,iWAIA,SAACF,EAAA,EAAD,CAAgBN,MAAOU,EAAYT,QAAS,iBAE5C,mBAEA,wDACA,cAAGU,KAAK,8CAAR,8D","sources":["components/CaptionedImage/CaptionedImage.js","pages/projects/autoClicker.js"],"sourcesContent":["import React from 'react'\n\nconst CaptionedImage = ({ image, caption, alt }) => {\n  if (alt === undefined) {\n    alt = caption\n  }\n\n  return (\n        <div className={'flex flex-col m-2'}>\n            <img src={image} className={`max-w-80 max-h-80 border-amber-500 rounded-md border-b-2\n            ${caption !== undefined ? ' rounded-bl-none' : ''}`} alt={alt}></img>\n            <div className=\"flex rounded-b-lg\">\n                <p className={'mt-0 px-1 text-sm bg-amber-500 rounded-b-sm'}>{caption}</p>\n            </div>\n        </div>\n  )\n}\n\nexport default CaptionedImage\n","import React from 'react'\nimport '../Pages.css'\nimport CaptionedImage from '../../components/CaptionedImage/CaptionedImage'\nimport exampleImage from '../../images/autoClickerExample.jpg'\nimport addMenu from '../../images/autoClickerAddMenu.jpg'\nimport UMLDiagram from '../../images/autoClickerUML.jpg'\n\nconst AutoClicker = () => {\n  return (\n        <>\n        <h1>Custom Auto Clicker</h1>\n        <p>When looking for an auto clicker, most of the options I found online either lacked the\n            functionality I wanted, came from suspicious websites, or were not free. To solve this, I wrote own program\n            using Python and PyQt6.</p>\n        <br></br>\n        <p>The user interface uses cards to display each instruction. The instructions can be reordered, edited, and deleted\n            with the buttons on the cards. A second thread runs un parallel to monitor for the escape event, so that the program\n            can be stop and started.\n        </p>\n        <div className={'flex flex-wrap gap-8 justify-center'}>\n            <CaptionedImage image={exampleImage} caption={'Main user interface'} maxHeight={72}/>\n            <CaptionedImage image={addMenu} caption={'New instruction menu'} maxHeight={72}/>\n        </div>\n\n        <p>My program features a modular design that allows for the addition of different functionality. A simple &quot;instruction&quot;\n            class can be extended to add any new commands. Left click, right click, mouse movement, course and fine delay are currently\n            implemented. In the future, keyboard shortcuts, typing, and dragging will be added.\n        </p>\n        <CaptionedImage image={UMLDiagram} caption={'UML Diagram'}/>\n\n        <br></br>\n\n        <p>View the full project here:</p>\n        <a href=\"https://github.com/ecranston405/AutoClicker\">\n        https://github.com/ecranston405/AutoClicker</a>\n        </>\n\n  )\n}\n\nexport default AutoClicker\n"],"names":["image","caption","alt","undefined","className","src","CaptionedImage","exampleImage","maxHeight","addMenu","UMLDiagram","href"],"sourceRoot":""}