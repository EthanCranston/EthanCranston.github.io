"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[658],{2478:function(e,n,i){i.d(n,{Z:function(){return c}});var t=i(5671),o=i(3144),s=i(9340),a=i(5716),r=i(2791),l=i(1293),u=i.n(l),h=(i(5156),i(9402),i(184)),c=function(e){(0,s.Z)(i,e);var n=(0,a.Z)(i);function i(e){var o;return(0,t.Z)(this,i),(o=n.call(this,e)).code=e.code,o.language=e.language,o}return(0,o.Z)(i,[{key:"componentDidMount",value:function(){u().highlightAll()}},{key:"render",value:function(){return(0,h.jsx)("div",{children:(0,h.jsx)("pre",{class:"rounded-md",children:(0,h.jsx)("code",{className:"language-".concat(this.language),children:this.code})})})}}]),i}(r.Component)},658:function(e,n,i){i.r(n);var t,o,s=i(168),a=(i(2791),i(2478)),r=i(9510),l=(i(4311),i(184));n.default=function(){return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)("h1",{children:"Reverse Equation Finder"}),(0,l.jsx)("p",{children:"I occasionally found myself in the situation where I had a problem and the solution, but could not remember how I had originally solved it. To overcome this, I wrote a program in C++ that exhaustively checks possible equations until the correct one is found."}),(0,l.jsx)("p",{children:"The program takes in the units and value of the givens and solution to a problem, then recursively structures equations until a valid answer is found. As an example, take this simple inelastic collision story problem:"}),(0,l.jsx)("p",{class:"ml-16 mr-16",children:(0,l.jsx)("i",{children:"Joe has a mass of 17kg and is sliding down a snowy hill with a velocity of 5m/s. His brother has a mass of 23kg and is sliding down the same hill with a velocity of 3m/s. The two boys collide and slide down the hill together. Calculate the resulting velocity of the two boys."})}),(0,l.jsx)("p",{children:"If we know the solution is 3.85m/s, we can plug in the values and units to get the original equation. In this case, the program computed 166,093 possible equations in ~1 second until it verified the equation:"}),(0,l.jsx)(r.Q,{tex:String.raw(t||(t=(0,s.Z)(["3.85=\frac{23*3+17*5}{17+23}"],["3.85=\\frac{23*3+17*5}{17+23}"])))}),(0,l.jsx)("p",{children:"Which you may recognize from this Physics I momentum equation:"}),(0,l.jsx)(r.Q,{tex:String.raw(o||(o=(0,s.Z)(["V=\frac{M_1V_1+M_2V_2}{M_1+M_2}"],["V=\\frac{M_1V_1+M_2V_2}{M_1+M_2}"])))}),(0,l.jsx)("br",{}),(0,l.jsx)("p",{children:"To make the creation of new equations simple, the equations are represented as binary trees. This makes combining and evaluating equation efficient. Below is a simplified outline of the equation class."}),(0,l.jsx)(a.Z,{language:"c",code:u}),(0,l.jsx)("br",{}),(0,l.jsxs)("p",{children:["View the full project here: ",(0,l.jsx)("a",{href:"https://github.com/ecranston405/EquationFinder",children:"https://github.com/ecranston405/EquationFinder"})]})]})};var u="class Equation {\nMathOperator _operation;\nEquation* _eq1; // right side of operator\nEquation* _eq2; // left side of operator\ndouble _value;\nint _order;\ndouble _unit;\n}"},4311:function(){}}]);
//# sourceMappingURL=658.d2dee984.chunk.js.map