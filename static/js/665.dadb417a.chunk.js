"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[665],{2478:function(e,n,t){t.d(n,{Z:function(){return u}});var d=t(5671),o=t(3144),a=t(9340),s=t(4876),i=t(2791),r=t(1293),c=t.n(r),l=(t(5156),t(9402),t(184)),u=function(e){(0,a.Z)(t,e);var n=(0,s.Z)(t);function t(e){var o;return(0,d.Z)(this,t),(o=n.call(this,e)).code=e.code,o.language=e.language,o}return(0,o.Z)(t,[{key:"componentDidMount",value:function(){c().highlightAll()}},{key:"render",value:function(){return(0,l.jsx)("div",{className:"max-w-full",children:(0,l.jsx)("pre",{className:"rounded-md border-amber-500 border-b-2",children:(0,l.jsx)("code",{className:"language-".concat(this.language),children:this.code})})})}}]),t}(i.Component)},815:function(e,n,t){t.r(n),t.d(n,{default:function(){return i}});t(2791),t(4311);var d=t(2478),o=t.p+"static/media/bezierVideo.ae04ecd4b51251a289ff.mp4",a=t(184),s="void smooth_curve(Node* node1, sf::Vector2f eq[4], float flatnessFactor){\n    Node* node2 = node1->next;\n    Node* node3 = node2->next;\n    \n    if(is_flat(node1->point,node2->point,node3->point, flatnessFactor)) return;\n    else{\n        //creates new  points\n        Node* add1 = new Node;\n        Node* add2 = new Node;\n        //assigns t value to points\n        add1->t = (node1->t + node2->t) / 2;\n        add2->t = (node2->t + node3->t) / 2;\n        //calculates point value\n        add1->point = eq[0] * add1->t * add1->t * add1->t + eq[1] * add1->t * add1->t + eq[2] * add1->t + eq[3];\n        add2->point = eq[0] * add2->t * add2->t * add2->t + eq[1] * add2->t * add2->t + eq[2] * add2->t + eq[3];\n        //appends new points to linked list\n        add1->next = node2;\n        node1->next = add1;\n        add2->next = node3;\n        node2->next = add2;\n        //rinse and repeat\n        smooth_curve(node1, eq, flatnessFactor);\n        smooth_curve(node2, eq, flatnessFactor);\n    }",i=function(){return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("h1",{children:"B\xe9zier Curve"}),(0,a.jsxs)("p",{children:["In this project, I implemented my own curve class to extend ",(0,a.jsx)("a",{href:"https://www.sfml-dev.org/index.php",children:"SFML"}),". The class uses given points and a tension to construct the corresponding curve. The program technically creates a ",(0,a.jsx)("a",{href:"https://en.wikipedia.org/wiki/Centripetal_Catmull%E2%80%93Rom_spline",children:"Catmull\u2013Rom spline"})," which I chose because of its more efficient recursive implementation."]}),(0,a.jsx)("video",{src:o,controls:"controls",className:"border-amber-500 rounded-md border-b-2 max-w-80",children:"Your browser does not support the video player."}),(0,a.jsx)("p",{children:"The video above shows a demo of a curve object in a live editor window I built to help debug the program."}),(0,a.jsx)("p",{children:"The code below shows the main section of my recursive implementation. The nodes are saved in a circular linked list that allows new points to be inserted easily."}),(0,a.jsx)(d.Z,{language:"c",code:s})]})}},4311:function(){}}]);
//# sourceMappingURL=665.dadb417a.chunk.js.map