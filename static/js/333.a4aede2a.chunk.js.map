{"version":3,"file":"static/js/333.a4aede2a.chunk.js","mappings":"2HAkBA,IAhBuB,SAAC,GAA6B,IAA3BA,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,QAASC,EAAU,EAAVA,IAKxC,YAJYC,IAARD,IACFA,EAAMD,IAIF,iBAAKG,UAAW,oBAAhB,WACI,gBAAKC,IAAKL,EAAOI,UAAS,qFACZD,IAAZF,EAAwB,mBAAqB,IAAMC,IAAKA,KAC1D,gBAAKE,UAAU,oBAAf,UACI,cAAGA,UAAW,8CAAd,SAA8DH,W,yJCkB9E,EAxBMK,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GACJ,WAAaC,GAAQ,IAAD,yBAClB,cAAMA,IACDC,KAAOD,EAAMC,KAClB,EAAKC,SAAWF,EAAME,SAHJ,EAoBnB,OAhBA,yCAED,WACEC,IAAAA,iBACD,oBAED,WACE,OACQ,gBAAKN,UAAU,aAAf,UACI,gBAAKA,UAAW,yCAAhB,UACI,iBAAMA,UAAS,mBAAcO,KAAKF,UAAlC,SACKE,KAAKH,eAK3B,EArBGF,CAAoBM,EAAAA,Y,wPC2B1B,EAzBqB,WACnB,OACM,iBAAKR,UAAU,0CAAf,WACI,6CACA,uMAGA,iBAAKA,UAAU,sCAAf,WACI,SAACS,EAAA,EAAD,CAAgBb,MAAOc,EAAWb,QAAS,8BAC3C,SAACY,EAAA,EAAD,CAAgBb,MAAOe,EAAkBd,QAAS,mCAClD,SAACY,EAAA,EAAD,CAAgBb,MAAOgB,EAAef,QAAS,iCAEnD,mBACA,6TAGA,mBAEA,SAACK,EAAA,EAAD,CAAaG,SAAS,IAAGD,KAAMS,KAE/B,wHAONA,EAAS,mvB","sources":["components/CaptionedImage/CaptionedImage.js","components/CodeSnippet/CodeSnippet.js","pages/projects/DPPathfinder.js"],"sourcesContent":["import React from 'react'\n\nconst CaptionedImage = ({ image, caption, alt }) => {\n  if (alt === undefined) {\n    alt = caption\n  }\n\n  return (\n        <div className={'flex flex-col m-2'}>\n            <img src={image} className={`max-w-80 max-h-80 border-amber-500 rounded-md border-b-2\n            ${caption !== undefined ? ' rounded-bl-none' : ''}`} alt={alt}></img>\n            <div className=\"flex rounded-b-lg\">\n                <p className={'mt-0 px-1 text-sm bg-amber-500 rounded-b-sm'}>{caption}</p>\n            </div>\n        </div>\n  )\n}\n\nexport default CaptionedImage\n","import React from 'react'\nimport Prism from 'prismjs'\nimport './prismDark.css'\nimport 'prismjs/components/prism-python'\nimport 'prismjs/components/prism-c'\n\nclass CodeSnippet extends React.Component {\n  constructor (props) {\n    super(props)\n    this.code = props.code\n    this.language = props.language\n  }\n\n  componentDidMount () {\n    Prism.highlightAll()\n  }\n\n  render () {\n    return (\n            <div className=\"max-w-full\">\n                <pre className={'rounded-md border-amber-500 border-b-2'}>\n                    <code className={`language-${this.language}`}>\n                        {this.code}\n                    </code>\n                </pre>\n            </div>\n    )\n  }\n};\n\nexport default CodeSnippet\n","import React from 'react'\nimport '../Pages.css'\nimport CaptionedImage from '../../components/CaptionedImage/CaptionedImage'\nimport CodeSnippet from '../../components/CodeSnippet/CodeSnippet'\nimport coloradoImage from '../../images/coloradoPath.jpg'\nimport kiliImage from '../../images/kilimanjaroPath.jpg'\nimport grandCanyonImage from '../../images/grandCanyonPath.jpg'\n\nconst DPPathfinder = () => {\n  return (\n        <div className=\"flex flex-col place-items-center w-full\">\n            <h1>DP Path-Finding</h1>\n            <p>This program determines the most efficient path through a given terrain. It generates a grayscale map of the given\n                elevation data with optimal paths plotted as an output.</p>\n\n            <div className='flex flex-wrap gap-8 justify-center'>\n                <CaptionedImage image={kiliImage} caption={'Path through Kilimanjaro'}/>\n                <CaptionedImage image={grandCanyonImage} caption={'Path through The Grand Canyon'}/>\n                <CaptionedImage image={coloradoImage} caption={'Path through The Rockies'}/>\n            </div>\n            <br></br>\n            <p>The program uses the given terrain elevation and finds the path left to right that experiences\n                the least elevation change. The program represents the elevations as a grayscale image. The optimal path from each\n                left pixel is plotted in blue, and the most optimal path is plotted in yellow.</p>\n            <br></br>\n\n            <CodeSnippet language=\"c\"code={dpCode}/>\n\n            <p>This simplified code snippet shows the algorithm used to  efficiently calculate the path</p>\n        </div>\n\n  )\n}\nexport default DPPathfinder\n\nconst dpCode = '// traverse the elevation table in reverse order\\nfor (int w = _width - 2; w > -1; w--) {\\n    for (int h = 0; h < _height; h++) {\\n        // get the current elevation\\n        curr_pos = _elevations.at(h).at(w);\\n\\n        // calculate the total distance for each possible movement   \\n        straight_dist = abs(curr_pos - _elevations.at(h).at(w + 1)) + _dynamic_paths.at(h).at(w + 1);\\n        down_dist = abs(curr_pos - _elevations.at(h + 1).at(w + 1)) + _dynamic_paths.at(h + 1).at(w + 1);\\n        up_dist = abs(curr_pos - _elevations.at(h - 1).at(w + 1)) + _dynamic_paths.at(h - 1).at(w + 1);\\n\\n        //choose the shortest path and update the path table\\n        _dynamic_paths.at(h).at(w) = min(straight_dist, up_dist, down_dist)\\n    }\\n'\n"],"names":["image","caption","alt","undefined","className","src","CodeSnippet","props","code","language","Prism","this","React","CaptionedImage","kiliImage","grandCanyonImage","coloradoImage","dpCode"],"sourceRoot":""}