{"version":3,"file":"static/js/658.0f750ae5.chunk.js","mappings":"2OA8BA,EAxBMA,SAAAA,IAAAA,EAAAA,EAAAA,GAAAA,EAAAA,GAAAA,IAAAA,GAAAA,EAAAA,EAAAA,GAAAA,GACJ,WAAaC,GAAQ,IAAD,yBAClB,cAAMA,IACDC,KAAOD,EAAMC,KAClB,EAAKC,SAAWF,EAAME,SAHJ,EAoBnB,OAhBA,yCAED,WACEC,IAAAA,iBACD,oBAED,WACE,OACQ,gBAAKC,UAAU,aAAf,UACI,gBAAKA,UAAW,yCAAhB,UACI,iBAAMA,UAAS,mBAAcC,KAAKH,UAAlC,SACKG,KAAKJ,eAK3B,EArBGF,CAAoBO,EAAAA,Y,6FCqC1B,UAtCuB,WACrB,OACM,iCACA,qDACA,sUAIA,iPAGA,cAAGF,UAAU,gBAAb,UAA6B,kTAK7B,6OAGA,SAAC,IAAD,CAAeG,IAAKC,OAAOC,IAAT,uFAClB,2FAGA,SAAC,IAAD,CAAeF,IAAKC,OAAOC,IAAT,6FAElB,mBAEA,sOAEI,SAAC,IAAD,CAAaP,SAAS,IAAGD,KAAMS,KACnC,mBACA,yDACA,cAAGC,KAAK,kDAAR,iEAQR,IAAMD,EAAe,kL","sources":["components/CodeSnippet/CodeSnippet.js","pages/projects/equationFinder.js"],"sourcesContent":["import React from 'react'\nimport Prism from 'prismjs'\nimport './prismDark.css'\nimport 'prismjs/components/prism-python'\nimport 'prismjs/components/prism-c'\n\nclass CodeSnippet extends React.Component {\n  constructor (props) {\n    super(props)\n    this.code = props.code\n    this.language = props.language\n  }\n\n  componentDidMount () {\n    Prism.highlightAll()\n  }\n\n  render () {\n    return (\n            <div className=\"max-w-full\">\n                <pre className={'rounded-md border-amber-500 border-b-2'}>\n                    <code className={`language-${this.language}`}>\n                        {this.code}\n                    </code>\n                </pre>\n            </div>\n    )\n  }\n};\n\nexport default CodeSnippet\n","import React from 'react'\nimport CodeSnippet from '../../components/CodeSnippet/CodeSnippet'\nimport { MathComponent } from 'mathjax-react'\nimport '../Pages.css'\n\nconst EquationFinder = () => {\n  return (\n        <>\n        <h1>Reverse Equation Finder</h1>\n        <p>While studying mechanical engineering, I occasionally found myself in the situation where I had a problem and its solution, but\n            could not remember how I had originally solved it. To overcome this, I wrote a program in C++ that\n            exhaustively checks possible equations until the correct one is found.\n        </p>\n        <p>The program takes in the units and values of the givens and of the solution, then recursively\n            structures equations until a valid answer is found. As an example, take this simple inelastic collision\n            story problem:</p>\n        <p className=\"md:w-2/3 my-5\"><i>Joe has a mass of 17kg and is sliding down a snowy hill with a velocity of 5m/s.\n            His brother has a mass of 23kg and is sliding down the same hill with a velocity of 3m/s.\n            The two boys collide and slide down the hill together.\n            Calculate the resulting velocity of the two boys.</i></p>\n\n        <p>If we know the solution is 3.85m/s, we can plug in the values and units to get the original equation.\n            In this case, the program computed 166,093 possible equations in ~1 second until it verified the equation:\n        </p>\n        <MathComponent tex={String.raw`3.85=\\frac{23*3+17*5}{17+23}`} />\n        <p>\n            Which you may recognize from this Physics I momentum equation:\n        </p>\n        <MathComponent tex={String.raw`V=\\frac{M_1V_1+M_2V_2}{M_1+M_2}`} />\n\n        <br></br>\n\n        <p>To make the creation of new equations simple, the equations are represented as binary trees.\n            This makes combining and evaluating equation efficient. Below is a simplified outline of the equation class.</p>\n            <CodeSnippet language=\"c\"code={equationCode}/>\n        <br></br>\n        <p>View the full project here: </p>\n        <a href=\"https://github.com/EthanCranston/EquationFinder\">\n        https://github.com/EthanCranston/EquationFinder</a>\n        </>\n  )\n}\n\nexport default EquationFinder\n\nconst equationCode = 'class Equation {\\nMathOperator _operation;\\nEquation* _eq1; // right side of operator\\nEquation* _eq2; // left side of operator\\ndouble _value;\\nint _order;\\ndouble _unit;\\n}'\n"],"names":["CodeSnippet","props","code","language","Prism","className","this","React","tex","String","raw","equationCode","href"],"sourceRoot":""}